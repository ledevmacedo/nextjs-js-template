openapi: 3.0.0
info:
  title: API de Usuários e Posts
  version: 1.0.0
  description: API para gerenciar usuários e posts.

servers:
  - url: /api

paths:
  /users:
    get:
      summary: Retorna uma lista de usuários
      responses:
        "200":
          description: Uma lista de usuários.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      summary: Retorna um usuário específico pelo ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID único do usuário
          schema:
            type: string
            format: uuid
            example: 68fc0fd28318f76189c8dd91
      responses:
        "200":
          description: Usuário encontrado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Usuário não encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuário não encontrado"

  /posts:
    get:
      summary: Retorna uma lista de posts
      responses:
        "200":
          description: Uma lista de posts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
    post:
      summary: Cria um novo post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInput"
      responses:
        "201":
          description: Post criado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Requisição inválida.

  /posts/{id}:
    get:
      summary: Retorna um post específico pelo ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID único do post
          schema:
            type: string
            format: uuid
            example: 6900ac8a6cb7a588ed6f9cd9
      responses:
        "200":
          description: Post encontrado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post não encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Postagem não encontrado"

  /users/{id}/posts:
    get:
      summary: Retorna os posts de um usuário específico
      parameters:
        - name: id
          in: path
          required: true
          description: ID único do usuário
          schema:
            type: string
            format: uuid
            example: 68fc0fd28318f76189c8dd91
      responses:
        "200":
          description: Lista de posts do usuário.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"

  /auth/register:
    post:
      summary: Registra um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201":
          description: Usuário registrado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegisterResponse"
        "400":
          description: Dados inválidos ou email já cadastrado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/signin:
    post:
      summary: Autentica um usuário (NextAuth)
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Endereço de e-mail do usuário
                  example: maria.carvalho@example.com
                password:
                  type: string
                  description: Senha do usuário
                  example: minhasenha123
                csrfToken:
                  type: string
                  description: Token CSRF do NextAuth
              required:
                - email
                - password
                - csrfToken
      responses:
        "200":
          description: Login realizado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
        "400":
          description: Credenciais inválidas.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/signout:
    post:
      summary: Desautentica um usuário (NextAuth)
      responses:
        "200":
          description: Logout realizado com sucesso.

  /auth/session:
    get:
      summary: Retorna a sessão atual do usuário (NextAuth)
      responses:
        "200":
          description: Sessão encontrada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
        "401":
          description: Usuário não autenticado.

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          readOnly: true
          example: 68fc0fd28318f76189c8dd91
        name:
          type: string
          description: Nome do usuário
          example: João Silva
        email:
          type: string
          format: email
          description: Endereço de e-mail do usuário
          example: joao.silva@example.com
        password:
          type: string
          description: Senha do usuário (hash)
          readOnly: true
          example: "$2a$12$..."
        image:
          type: string
          description: URL da imagem do usuário
          example: "https://example.com/avatar.jpg"
        emailVerified:
          type: string
          format: date-time
          description: Data de verificação do email
          example: "2024-01-15T10:30:00Z"
        role:
          type: string
          description: Papel/função do usuário
          example: "user"
        createdAt:
          type: string
          format: date-time
          description: Data de criação do usuário
          readOnly: true
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Data da última atualização do usuário
          readOnly: true
          example: "2024-01-15T10:30:00Z"
      required:
        - name
        - email

    Post:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          description: Título do post
          example: Meu Primeiro Post
        content:
          type: string
          description: Conteúdo do post
          example: Este é o conteúdo do meu primeiro post.
        tags:
          type: array
          items:
            type: string
          description: Tags do post
          example: ["tecnologia", "programação"]
        author:
          type: string
          format: uuid
          description: ID do autor do post
          example: 60c72b2f9b1d8c001c8e4b7a
        createAt:
          type: string
          format: date-time
          description: Data e hora de criação do post
          readOnly: true
      required:
        - title
        - content
        - tags
        - author

    PostInput:
      type: object
      properties:
        title:
          type: string
          description: Título do post
          example: Meu Primeiro Post
        content:
          type: string
          description: Conteúdo do post
          example: Este é o conteúdo do meu primeiro post.
        tags:
          type: array
          items:
            type: string
          description: Tags do post
          example: ["tecnologia", "programação"]
        author:
          type: string
          format: uuid
          description: ID do autor do post
          example: 60c72b2f9b1d8c001c8e4b7a
      required:
        - title
        - content
        - tags
        - author

    UserRegister:
      type: object
      properties:
        name:
          type: string
          description: Nome do usuário
          example: Maria Carvalho
        email:
          type: string
          format: email
          description: Endereço de e-mail do usuário
          example: maria.carvalho@exemple.com
        password:
          type: string
          minLength: 6
          description: Senha do usuário (mínimo 6 caracteres)
          example: minhasenha123
        role:
          type: string
          description: Papel/função do usuário
          example: "user"
          default: "user"
        image:
          type: string
          description: URL da imagem do usuário
          example: "https://example.com/avatar.jpg"
      required:
        - name
        - email
        - password

    UserRegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: "Usuário criado com sucesso"
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 68fc0fd28318f76189c8dd91
            name:
              type: string
              example: João Silva
            email:
              type: string
              format: email
              example: maria.carvalho@example.com
            image:
              type: string
              example: null
            role:
              type: string
              example: "user"
            createdAt:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00Z"

    UserLoginResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 68fc0fd28318f76189c8dd91
            name:
              type: string
              example: João Silva
            email:
              type: string
              format: email
              example: joao.silva@example.com
            image:
              type: string
              example: null
            role:
              type: string
              example: "user"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Mensagem de erro
          example: "Email já cadastrado"
